callVariants <- data.table::fread("C:\\Users\\Tanner_N\\Downloads\\Galaxy27-[VCFtoTab-delimited__on_data_21].tabular")
bcfTollsCall <- data.table::fread("C:\\Users\\Tanner_N\\Downloads\\Galaxy28-[VCFtoTab-delimited__on_data_23].tabular")
View(bcfTollsCall)
callVariants <- data.table::fread("C:\\Users\\Tanner_N\\Downloads\\Galaxy29-[VCFtoTab-delimited__on_data_22].tabular")
View(callVariants)
View(callVariants)
str(callVariants)
str(bcfTollsCall)
bcfToolsCall <- data.table::fread("C:\\Users\\Tanner_N\\Downloads\\Galaxy28-[VCFtoTab-delimited__on_data_23].tabular")
rm(bcfTollsCall)
cvPos <- callVariants$POS
cvPos <- bcfToolsCall$POS
cvPos <- callVariants$POS
bcfPos <- bcfToolsCall$POS
summary(bcfPos)
summary(cvPos)
# so we are seeing the same min and max which is good. Curious that there are so many extra values within cvPos..
tail(cvPos)
cvUni <- unique(cvPos)
duplicatesCV <- setdiff(cvPos, cvUni)
?setdiff
bcfUni <- unique(bcfPos)
install.packages("vcfTools")
install.packages("vcfR")
library(vcfR)
?vcfR
intersectionGalaxy <- data.table::fread("C:\\Users\\Tanner_N\\Downloads\\Galaxy31-[VCFtoTab-delimited__on_data_30].tabular")
View(intersectionGalaxy)
# lets look at what positons are duplicates within the bcfPos vec
dupeBCF <- duplicates(bcfPos)
# lets look at what positons are duplicates within the bcfPos vec
dupeBCF <- duplicated(bcfPos)
sum(dupeBCF)
# lets look at what positons are duplicates within the bcfPos vec
dupeBCF <- bcfPos[duplicated(bcfPos)]
dupeBCF
dupeRowsEX <- bcfToolsCall[c(685,686),]
View(dupeRowsEX)
dupeRowsEX <- bcfToolsCall[c(600:625),]
View(dupeRowsEX)
dupeRowsEX <- bcfToolsCall[c(625:675),]
View(dupeRowsEX)
dupeRowsEX <- dupeRowsEX[c(31,32), ]
View(dupeRowsEX)
spikeProteinLocation <- 21563:25384
vcfCallsInSpike <- intersect(bcfPos, spikeProteinLocation)
spikeRows <- bcfToolsCall[21000:26000, ]
View(spikeRows)
spikeRows <- bcfToolsCall[21500:26500, ]
View(spikeRows)
bcfVariants <- bcfToolsCall[bcfToolsCall$ALT != "." , ]
VCvariants <- callVariants[callVariants$ALT != ".", ]
View(VCvariants)
VCvariants <- callVariants[callVariants$ALT != "<*>", ]
View(VCvariants)
bcfVarLess <- vcfVariants[, c('ALT', 'POS', 'REF')]
bcfVarLess <- bcfVariants[, c('ALT', 'POS', 'REF')]
VCvarLess <- VCvariants[, c('ALT', 'POS', 'REF')]
intersection_vc_bcf <- intersect(VCvarLess, bcfVarLess)
View(VCvarLess)
View(VCvariants)
View(bcfVarLess)
bcfVarLess <- bcfVariants[, c('POS', 'REF', 'ALT')]
VCvarLess <- VCvariants[, c('POS', 'REF', 'ALT')]
intersection_vc_bcf <- intersect(VCvarLess, bcfVarLess)
View(VCvarLess)
intersection_vc_bcf <- intersect(VCvarLess$POS, bcfVarLess$POS)
intersection_vc_bcf
length(intersection_vc_bcf)
# alright so they are intersecting in position... but not intersection on the specific variants?
mask <- VCvarLess %in% intersection_vc_bcf
# alright so they are intersecting in position... but not intersection on the specific variants?
mask <- VCvarLess$POS %in% intersection_vc_bcf
matchesVC <- VCvarLess[mask]
View(matchesVC)
interTest <- intersect(VCvarLess, matchesVC)
?intersect
library(generics)
?generics
unload(generics)
detach("package:generics", unload = TRUE)
interTest <- generics::intersect(VCvarLess, matchesVC)
?intersect
data1 <- data.frame(x1 = 1:5,                      # Create first example data
x2 = letters[1:5],
x3 = "x")
data2 <- data.frame(x1 = 3:6,                      # Create second example data
x2 = letters[3:6],
x3 = c("x", "x", "y", "y"))
data1
data2
data_common1 <- generics::intersect(data1, data2)
data_common1
interTest <- generics::intersect(VCvarLess, matchesVC) # still no matches.. wow. Func just isn't working... there is undoubtedly matches I can see with my own eyes. hm. Annoying these functions don't quite work.
data1 <- data.frame(x1 = 1:5,                      # Create first example data
x2 = letters[1:5],
x3 = "x")
data2 <- data.frame(x1 = 3:6,                      # Create second example data
x2 = letters[3:6],
x3 = c("x", "x", "y", "y"))
data1
data2
data_common1 <- generics::intersect(data1, data2)
data_common1 # empty... so.... something is wrong with my system because a tutorial is legit saying that this should work. What the hell.
data_common1 <- intersect(data1, data2)
data_common1 # empty... so.... something is wrong with my system because a tutorial is legit saying that this should work. What the hell.
?intersect
data_common2 <- data.table::fintersect(data1, data2, all = T)
data1 <- data.table::as.data.table(data1)
data2 <- data.table::as.data.table(data2)
data_common2 <- data.table::fintersect(data1, data2, all = T)
data_common2
install.packages("VennDiagram")
?VennDiagram
rm(data1, data2, data_common1, data_common2, matchesVC)
rm(interTest)
?writeLines
?unlist
unl <- unlist(VCvarLess)
unl <- unlist(VCvarLess[1,])
unl <- paste(unlist(VCvarLess[1,]), collapse = "_")
writeLines(unl)
writeLines(unl, con = 'tstfile.txt')
unl = rep(unl, 40)
writeLines(unl, con = 'tstfile.txt')
rowsToTextFile <- function(dataFrame, fileName = "defaultName.txt"){
retVec <- character(length(nrow(dataFrame)))
for(i in 1:nrow(dataFrame)){
retVec[i] <- paste(unlist(dataFrame[i, ]), collapse = "_")
}
writeLines(retVec, con = fileName)
}
rowsToTextFile(VCvarLess, "variantCall_VCF_SARScov.txt")
rowsToTextFile(bcfVarLess, "bcf_VCF_SARScov.txt")
freeBayesCall <- data.table::fread("C:\\Users\\Tanner_N\\Downloads\\Galaxy35-[VCFtoTab-delimited__on_data_25].tabular")
freeBayesLess <- freeBayesLess[, c('POS','REF','ALT')]
freeBayesLess <- freeBayesCall[, c('POS','REF','ALT')]
View(freeBayesLess)
freeBayesLess <- freeBayesLess[ freeBayesLess$ALT != ".",]
rowsToTextFile(freeBayesLess, "freeBayes_VCF_SARScov.txt")
numNucleotides <- 25384 - 21563
numProteins <- numNucleotides/3
numProteins <- round(numNucleotides/3)
# which amino acids from 400 to 550 ?
range <- 3*c(400, 550)
range
nucleotideRange <- 25384+c(range)
nucleotideRange
variants_of_interest_range <- 26584:27034
variants_of_interest_range
spikeVars_bcf <- bcfVarLess[bcfVarLess %in% variants_of_interest_range]
spikeVars_bcf <- bcfVarLess[bcfVarLess %in% variants_of_interest_range, ]
spikeVars_bcf <- bcfVarLess[bcfVarLess$POS %in% variants_of_interest_range, ]
spikeVars_bcf
spikeVars_VC <- VCvarLess[VCvarLess$POS %in% variants_of_interest_range, ]
spideVars_VC
spikeVars_VC
spikeVars_freeBayes <- freeBayesLess[freeBayesLess$POS %in% variants_of_interest_range, ]
spikeVars_freeBayes
write.csv(spikeVars_bcf, file = "spikeVars_bcf")
write.csv(spikeVars_bcf, file = "spikeVars_bcf.csv")
write.csv(spikeVars_VC, file = "spikeVars_VC.csv")
write.csv(spikeVars_freeBayes, file = "spikeVars_freeBayes.csv")
29903/43
sigmas <- seq(0.5,20,length.out = 20)
r2.0 <- function(sig){
y <- 2 + 1.2*x + rnorm(100,0,sd = sig) # our response; a function of x plus
}
sigs <- sapply(sigmas, r2.0)
r2.0 <- function(sig){
y <- 2 + 1.2*x + rnorm(100,0,sd = sig) # our response; a function of x plus
}
r2.0 <- function(sig){
x <- seq(1,10,length.out = 100)
y <- 2 + 1.2*x + rnorm(100,0,sd = sig) # our response; a function of x plus
}
sigs <- sapply(sigmas, r2.0)
sigs
plot(sigs ~ sigmas)
str(sigs)
class(sigs)
sigs[1]
sigs[1,1]
sigs[1,]
sigs[2,]
plot(sigs[1, ] ~ sigmas)
plot(sigs[2, ] ~ sigmas)
plot(sigs[3, ] ~ sigmas)
for(i in 4:25){}
for(i in 4:25){plot(sigs[i,] ~ sigmas) }
?fitted
seq(1,10,length.out = 100)
seq(1,10)
1:10
# seeing r2 for range 1-10 simple linear model
x <- seq(1,10,length.out = 100)
set.seed(1)
y <- 2 + 1.2*x + rnorm(100,0,sd = 0.9)
mod1 <- lm(y ~ x)
summary(mod1)$r.squared
sum((fitted(mod1) - y)^2)/100
# seeing r2 for range 1-2 simple linear model
x <- seq(1,2,length.out = 100)       # new range of x
set.seed(1)
y <- 2 + 1.2*x + rnorm(100,0,sd = 0.9)
mod1 <- lm(y ~ x)
summary(mod1)$r.squared
sum((fitted(mod1) - y)^2)/100        # Mean squared error
# seeing r2 for range 1-10 simple linear model
x <- seq(1,10,length.out = 100)
set.seed(1)
y <- 2 + 1.2*x + rnorm(100,0,sd = 0.9)
mod1 <- lm(y ~ x)
# seeing r2 for range 1-2 simple linear model
x <- seq(1,2,length.out = 100)       # new range of x
set.seed(1)
y <- 2 + 1.2*x + rnorm(100,0,sd = 0.9)
mod2 <- lm(y ~ x)
# seeing r2 for range 1-10 simple linear model
x <- seq(1,10,length.out = 100)
set.seed(1)
y <- 2 + 1.2*x + rnorm(100,0,sd = 0.9)
mod1 <- lm(y ~ x)
# seeing r2 for range 1-2 simple linear model
x2 <- seq(1,2,length.out = 100)       # new range of x
set.seed(1)
y2 <- 2 + 1.2*x + rnorm(100,0,sd = 0.9)
mod2 <- lm(y ~ x)
plot(x, y)
plot(x2, y2)
View(mod1)
r.squared
?r.squared
?summary
